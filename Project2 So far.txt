# Project 2

# Implementing: nearest neighbor
# Calculate euclidiean dist
import math
import numpy as np
import copy
# Use Pandas for reading txt files
import pandas as pd

# For nearest neighbor
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import KFold
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris
import matplotlib.pyplot as plt

# Load data
data = np.loadtxt('CS170_Small_Data__6.txt')


####################
# Cross-Validation #
####################
def nearestneighbor(data, current_set, feature_to_add_at_this_level):
    number_correctly_classfied = 0

    for i in range(0, data.shape[0]):
        # Object to classify
        
        object_to_classify = data[i, current_set]

        label_object_to_classify = data[i, 0]
        nearest_neighbor_distance = np.inf
        nearest_neighbor_location = np.inf

        for k in range(0, data.shape[0]):
            if k != i:
                distance = np.sqrt(np.sum((object_to_classify - data[k, current_set])**2))
                if distance < nearest_neighbor_distance:
                    nearest_neighbor_distance = distance
                    nearest_neighbor_location = k
                    nearest_neighbor_label = data[nearest_neighbor_location, 0]

        if label_object_to_classify == nearest_neighbor_label:
            number_correctly_classfied += 1

    accuracy = number_correctly_classfied / data.shape[0]
    print(accuracy)
    return accuracy

#####################
# Forward Selection #
#####################
def forward_selection(data):
  # Initialize an empty set
  current_set_of_features = []

  # Initialize best accuracy to 0
  best_so_far_accuracy = 0

  for i in range (1,6):
    #not if all bueno 
    feature_to_add_at_this_level = 0
    best_accuracy = 0
    best_features =[]

    # Iterate over features
    #not entirely bueno
    for k in range(1, 6):
      if k not in best_features: # Only consider adding, if not already added.
        
        print(f'--Considering adding the {k} feature')

        accuracy = nearestneighbor(data, current_set_of_features ,k)

        # Update best accuracy and feature to add
        #bueno
        if accuracy > best_accuracy:
          best_accuracy = accuracy
          feature_to_add_at_this_level = k
        
        # Check if adding the feature improves accuracy
        # no bueno move inside of k loop and then find a way to copy the list to a best choice list
        if best_accuracy > best_so_far_accuracy:
          # Update current set of features and best accuracy
          best_so_far_accuracy = best_accuracy
          current_set_of_features.append(feature_to_add_at_this_level)
    best_features.append(current_set_of_features) # Should save the best features but IT AINT
    print(f'On level {k} added feature {feature_to_add_at_this_level} to current set')
     
  # Return final set of features and best accuracy
  return best_features, best_so_far_accuracy

########################
# Backward Elimination #
########################
def backward_elimination(data):
  # Initialize current set of features as all features
  current_set_of_features = list(range(1, data.shape[1]-1))

  # Initialize best accuracy to 0
  best_so_far_accuracy = 0

  while True:
    feature_to_remove_at_this_level = []
    best_accuracy = 0

    # Iterate over features
    for k in current_set_of_features:
      # Create a new set of features by removing k
      new_set_of_features = current_set_of_features[:]
      new_set_of_features.remove(k)

      print(f'--Considering removing the {k} feature')
      accuracy = nearestneighbor(data, new_set_of_features, k+1)

      # Update best accuracy and feature to remove
      if accuracy > best_accuracy:
        best_accuracy = accuracy
        feature_to_remove_at_this_level = k

    # Check if removing the feature improves accuracy
    if best_accuracy > best_so_far_accuracy:
      # Update current set of features and best accuracy
      current_set_of_features.remove(feature_to_remove_at_this_level)
      best_so_far_accuracy = best_accuracy

      print(f'On level {k} removed feature {feature_to_remove_at_this_level} from current set')
    else:
      # No improvement in accuracy, exit loop
      break

  # Return final set of features and best accuracy
  return current_set_of_features, best_so_far_accuracy

##########
# Driver #
##########
def main():

  # UI
  c=int(input("Which algorithm? 1 for Forward Selection, 2 for Backward Elimination \n"))

  if c==1:
    # Perform Forward Selection
    final_set_of_features, best_accuracy = forward_selection(data)
    # Perform cross-validation
    accuracy = forward_selection(data)
    print('Accuracy: ',accuracy)
    
  elif c==2:
    # Perform Backward Elimination
    final_set_of_features, best_accuracy = backward_elimination(data)
    # Perform cross-validation
    accuracy = backward_elimination(data)
    print('Accuracy:', accuracy)
    
main()
  